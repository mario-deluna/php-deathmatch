#!/usr/bin/env php
<?php
set_time_limit(0);

// DS
if (!defined('DS')) { define('DS', DIRECTORY_SEPARATOR); }

/**
 *---------------------------------------------------------------
 * Bootstrap
 *---------------------------------------------------------------
 *
 * We need to access our dependencies & autloader..
 */
$container = require __DIR__ . DS . '..' . DS . 'bootstrap.php';

/**
 *---------------------------------------------------------------
 * Prepare and configure the window.
 *---------------------------------------------------------------
 *
 * Hints etc.
 */
$window = $container->get('window');

// configure the window
$window->setHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
$window->setHint(GLFW_CONTEXT_VERSION_MINOR, 3);
$window->setHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
$window->setHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

// open it
$window->open(
    $container->getParameter('window.title'),
    $container->getParameter('window.width'),
    $container->getParameter('window.height')
);

// enable vsync
$window->setSwapInterval(1);

// get the main loop
$loop = $container->get('loop');

/**
 * Load the meshes
 */
LOG_title("Loading meshes");
foreach([
    'terrain'
] as $file) {
    LOG_info("loading $file");

    $objParser = new \PGF\Mesh\ObjParser();
    $container->get('mesh_manager')->add(
        $file, $objParser->parse(file_get_contents(PATH_MESH . "/$file.obj"))
    );
} 

// test
$scene = $loop->getCurrentScene();

use glm\vec3;

$terrainD = new PGF\Texture\Texture(PATH_TEXUTRE . '/terrain_d.jpg');
$terrainS = new PGF\Texture\Texture(PATH_TEXUTRE . '/terrain_s.jpg');

$cube = new PGF\Entity\Primitives\Cube(
    new vec3(0, -100, 0), 
    new vec3(1000, 1000, 1000), 
    new vec3(0, 0, 0)
);

$cube->mesh = "terrain";
$cube->diffuseMap = $terrainD;
$cube->sepcularMap = $terrainS;

$scene->entities->add($cube);

$container->get('camera.main_perspective')->position = new vec3(-135.068733, 60.054232, -195.810322);

/**
 * Start the main loop
 */
$loop->start();

die;


/**
 * Prepare Shaders
 */
$shaders = new ShaderManager();

$shader = new Simple3DShader();
$shader->use();
$shader->setProjectionMatrx(\glm\value_ptr($camera->getProjectionMatrx()));
$shader->setViewMatrx(\glm\value_ptr($camera->getViewMatrix()));
$shader->setViewPosition($camera->position);
$shader->setLightPosition(\glm\vec3(1, 10, 1));

die;

/**
 * Create a camera
 */
$camera = new PerspectiveCamera(new vec3(-149.268480, 30.353672, -52.326704));

/**
 * Create a new scene
 */
$scene = new Scene;
$scene->addSystem(new Draw3DSystem($shaders->get('base3d'), $camera));

/**
 * Load the map
 */
$map = "
*****
*   *
*   *
*   *
*****
";

$gun = new Cube(new vec3(0, 0, 0), new vec3(1, 1, 1), new vec3(0, 0, 0));
$scene->entities->add($gun);

$gun2 = new Cube(new vec3(0, 10, 0), new vec3(1, 1, 1), new vec3(0, 0, 0));
$scene->entities->add($gun2);

$floor = new Cube(new vec3(0, -20, 0), new vec3(10, 0.5, 10), new vec3(0, 0, 0));
$scene->entities->add($floor);

// for($i=0;$i<1000;$i++) {
//     $cube = new Cube(new vec3(mt_rand(0, 100), mt_rand(0, 100), mt_rand(0, 100)), new vec3(mt_rand(0, 10), mt_rand(0, 10), mt_rand(0, 10)), new vec3(mt_rand(0, 90), mt_rand(0, 90), mt_rand(0, 90)));
//     $scene->entities->add($cube);
// }




/** 
 * Texture 
 */
$texture;
glGenTextures(1, $texture);
glBindTexture(GL_TEXTURE_2D, $texture); // all upcoming GL_TEXTURE_2D operations now have effect on this texture object
// set the texture wrapping parameters
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   // set texture wrapping to GL_REPEAT (default wrapping method)
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
// set texture filtering parameters
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

$data = stbi_load(PATH_TEXUTRE . '/noiseb.png', $width, $height, $nrChannels, 0);
if ($data) {
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, $width, $height, 0, GL_RGB, GL_UNSIGNED_BYTE, $data);
    glGenerateMipmap(GL_TEXTURE_2D);
} else {
    die('Could not load texture.');
}

//glViewport(0, 0, 800, 600);


glfwSetInputMode($window->getContext(), GLFW_CURSOR, GLFW_CURSOR_DISABLED);  

$lx = $ly = 0;
$camera->setAngel(-90, 0);

/**
 * Main loop
 */
while (!$window->shouldClose())
{   
    // poll window events
    $window->pollEvents();

    // bind the texture
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, $texture);

    if ($window->getKeyState(GLFW_KEY_W) === GLFW_PRESS) {
        $camera->moveForward(1.0);
    } elseif ($window->getKeyState(GLFW_KEY_S) === GLFW_PRESS) {
        $camera->moveBackward(1.0);
    }

    if ($window->getKeyState(GLFW_KEY_A) === GLFW_PRESS) {
        $camera->moveLeft(1.0);
    } elseif ($window->getKeyState(GLFW_KEY_D) === GLFW_PRESS) {
        $camera->moveRight(1.0);
    }


    glfwGetCursorPos($window->getContext(), $x, $y);
    $offx = ($x - $lx) * 0.2;
    $offy = ($y - $ly) * -0.2;

    //echo "$x, $y = $offx, $offy\n";

    $camera->updateAngel($offx, $offy);
    $lx = $x; $ly = $y;

    $gun2->transform->position = clone $camera->position;
    $gun2->transform->rotation->x = -$camera->pitch;
    $gun2->transform->rotation->y = $camera->yaw + 90;
    $gun2->transform->moveForward(20);
    $gun2->transform->rotation->x -= 10;
    $gun2->transform->rotation->y -= 10;
    $gun2->transform->moveRight(6);
    $gun2->transform->moveDown(6);

    $gun2->transform->__transformDirty = true;

    if ($window->getKeyState(GLFW_KEY_SPACE) === GLFW_PRESS) {
        $bullet = new Cube(clone $gun2->transform->position, new vec3(1, 1, 1), clone $gun2->transform->rotation);
        $scene->entities->add($bullet);
    }

    $scene->update();

    $window->clearColor(0.7, 0.7, 0.7, 1);
    $window->clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    $scene->draw();

    // swap
    $window->swapBuffers();
}